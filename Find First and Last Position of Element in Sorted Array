class Solution {
    int FirstOcc(vector<int>& arr, int target) {
        int start = 0;
        int end = arr.size() - 1;
        int ans = -1;
        // if int range is start=2^31-1 and end is end= 2^31-1 then it will
        // overflow .
        //  int mid = (start+end)/2;

        // so avoid overflow we different method to slove this
        int mid = start + (end - start) / 2;

        while (start <= end) {
            if (arr[mid] == target) {
                ans = mid;
                end = mid - 1;
            }
            // go to right wla part
            else if (arr[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }

            // mid=(start+ end)/2;
            mid = start + (end - start) / 2;
        }
        return ans;
    }
    int LastOcc(vector<int>& arr, int target) {
        int start = 0;
        int end = arr.size() - 1;
        int ans = -1;

        // if int range is start=2^31-1 and end is end= 2^31-1 then it will
        // overflow .
        //  int mid = (start+end)/2;

        // so avoid overflow we different method to slove this
        int mid = start + (end - start) / 2;

        while (start <= end) {

            if (arr[mid] == target) {
                ans = mid;
                start = mid + 1;
            }
            // go to right wla part
            else if (arr[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }

            // mid=(start+ end)/2;
            mid = start + (end - start) / 2;
        }
        return ans;
    }

public:
    vector<int> searchRange(vector<int>& nums, int target) {
        return {FirstOcc(nums, target), LastOcc(nums, target)};
    }
};
